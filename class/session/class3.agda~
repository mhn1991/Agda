{-
1-State and prove the induction principle for lists.
2-Use rewrite to make lemma₀, lemma₁, and idrev more concise (if possible).
3-Compute the sum of all elements of a list using
  *a recursive function
  *a tail-recursive function
  *fold
4-Show the functions defined above return the same values.
-}
import Relation.Binary.PropositionalEquality as Eq
open Eq using (_≡_; refl; sym; trans; cong)
open Eq.≡-Reasoning
open import Data.List
open import Data.Nat

induction-ℕ : (P : ℕ → Set) → (P zero) → (∀ n → P n → P (1 + n)) → (∀ n → P n)
induction-ℕ P IB IS zero = IB
induction-ℕ P IB IS (suc n) = induction-ℕ (λ z → P (suc z)) (IS zero IB) (λ n₁ → IS (suc n₁)) n

zero-unit-+ : ∀ n → n + 0 ≡ n
zero-unit-+ n = induction-ℕ (λ n → n + 0 ≡ n) refl (λ _ n → cong suc n) n 


m' : ∀ m n → suc m ≡ suc n → m ≡ n
m' m .m refl = refl

rev : {A : Set} → (xs : List A) → List A
rev [] = []
rev (x ∷ xs) = (rev xs) ++ [ x ]

idrev : {A : Set} → (xs : List A) → rev (rev xs) ≡ xs
idrev [] = refl
idrev (x ∷ xs) = Goal where
  IH : rev (rev xs) ≡ xs
  IH = idrev xs
  Goal : rev (rev xs ++ [ x ]) ≡ x ∷ xs
  Goal = {!!}


--Q3
sumR :  List ℕ → ℕ
sumR [] = 0
sumR (x ∷ xs) = x + sumR xs

sumT :  List ℕ → ℕ → ℕ
sumT [] sum = sum
sumT (x ∷ xs) sum = sumT xs (sum + x)

sumF : List ℕ → ℕ
sumF = foldr _+_ 0 
