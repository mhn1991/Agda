import Relation.Binary.PropositionalEquality as Eq
open Eq using (_≡_;refl;cong;sym)
open import Data.Nat using (ℕ;zero;suc) renaming (_+_ to _⊕_)
open import Data.Nat.Properties using (+-comm;+-suc)
open Eq.≡-Reasoning using (begin_; _≡⟨_⟩_;_∎)

data ℤ : Set where
  _-_ : ℕ → ℕ → ℤ

minus-one = zero - (suc zero)

_+_ : ℤ → ℤ → ℤ
(m - n) + (m' - n') = (m ⊕ m') - (n ⊕ n')




data _≈_ : ℤ → ℤ → Set where
  m≈n : ∀ m m' n n' → m ⊕ n' ≡ m' ⊕ n → (m - m') ≈ (n - n')


refl≈ : ∀ p → p ≈ p
refl≈ (m - n) = m≈n m n m n (+-comm m n)

sym≈ : ∀ p q → p ≈ q → q ≈ p
sym≈ .(m - m') .(n - n') (m≈n m m' n n' x) = m≈n n n' m m' Goal where
  Goal : n ⊕ m' ≡ n' ⊕ m
  Goal = {!!}
